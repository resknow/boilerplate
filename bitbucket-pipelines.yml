# Installation ---
# 1. In Bitbucket, add $FTP_USERNAME $FTP_PASSWORD and $FTP_HOST as environment variables.
# 2. Commit this file to your repo
# 3. From Bitbucket Cloud > Commits > Commit Number > Run Pipeline > Custom:Init (this will
#    push everything and initial GitFTP)
#
# Usage ---
# - On each commit to master branch, it'll push all files to the $FTP_HOST
# - You also have the option to 'init' (from Bitbucket Cloud) - pushes everything and initialises
# - Finally you can also 'deploy-all' (from Bitbucket Cloud) - if multiple deploys fail, you
#   can deploy everything to "catch up"
#
image: fdsze/git-ftp-docker-php-composer-node

pipelines:

    # Pipelines that are triggered manually via the Bitbucket GUI
    custom:
        init: # -- First time init
            - step:
                script:
                    - apt-get update && apt-get install -y unzip
                    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
                    - composer install
                    - git ftp init -u "$FTP_USERNAME" -p "$FTP_PASSWORD" $FTP_HOST

        deploy-all: # -- Deploys all files from the selected commit
            - step:
                script:
                    - apt-get update && apt-get install -y unzip
                    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
                    - composer install
                    - git ftp push -u "$FTP_USERNAME" -p "$FTP_PASSWORD" $FTP_HOST --all

    # Automated triggers on commits to branches
    branches:
        master:
            - step:
                deployment: production
                script:
                    - apt-get update && apt-get install -y unzip
                    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
                    - composer install
                    - git ftp push -u "$FTP_USERNAME" -p "$FTP_PASSWORD" $FTP_HOST
